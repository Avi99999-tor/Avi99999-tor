#!/usr/bin/env python3
"""
Aviator Crash Game Simple Predictor
Version simple Python pour g√©n√©rer des pr√©dictions T+1 √† T+20
Logique : ¬´ expert ¬ª bas√© sur une combinaison sin/cos + random.
"""

import math
import random

def nettoyer_historique(input_str):
    """
    Convertit une cha√Æne de nombres s√©par√©s par des espaces ou virgules en liste de float.
    Ex : "1.03 2.45, 3.96 1.00" ‚Üí [1.03, 2.45, 3.96, 1.00]
    """
    parts = input_str.replace(',', ' ').split()
    valeurs = []
    for p in parts:
        try:
            v = float(p)
            if v > 0:
                valeurs.append(v)
        except ValueError:
            continue
    return valeurs

def expert_predictions(historique, tours=20):
    """
    G√©n√®re des pr√©dictions ¬´ expert ¬ª pour les prochains tours.
    Pour chaque i de 1 √† tours, on fait :
      pred = |sin(i + derni√®re_valeur) + cos(i * moyenne)| √ó facteur al√©atoire
      clamp entre 1.01 et 15.00
    """
    r√©sultats = []
    if not historique:
        # Si pas d'historique, on renvoie une liste fixe
        return [1.00 + i * 0.05 for i in range(1, tours+1)]
    
    moyenne = sum(historique) / len(historique)
    derniere = historique[-1]
    
    for i in range(1, tours + 1):
        # Composante trigonom√©trique
        trig = abs(math.sin(derniere + i) + math.cos(i * moyenne))
        # Facteur al√©atoire l√©ger
        facteur = 1 + random.uniform(0.1, 1.0)
        raw = trig * facteur
        # Clamp entre 1.01 et 15.00
        pred = round(min(max(raw, 1.01), 15.00), 2)
        r√©sultats.append(pred)
    return r√©sultats

def color_tag(val):
    """
    Renvoie un emoji selon la valeur :
      < 2   ‚Üí üîò
      < 10  ‚Üí üíú
      >= 10 ‚Üí üî¥
    """
    if val < 2:
        return "üîò"
    elif val < 10:
        return "üíú"
    else:
        return "üî¥"

def calculer_assurance(val):
    """
    D√©termine un pourcentage d'assurance en fonction de la valeur pr√©dite.
    > 10  : al√©atoire entre 87 et 93%
    > 5   : al√©atoire entre 80 et 88%
    > 3   : al√©atoire entre 75 et 85%
    <=1.2 : al√©atoire entre 60 et 70%
    sinon:  al√©atoire entre 68 et 78%
    """
    if val >= 10:
        return random.randint(87, 93)
    elif val >= 5:
        return random.randint(80, 88)
    elif val >= 3:
        return random.randint(75, 85)
    elif val <= 1.2:
        return random.randint(60, 70)
    else:
        return random.randint(68, 78)

def main():
    print("\nüá≤üá¨  Prediction By Mickael TOP EXACTE  üá≤üá¨\n")
    print("Format de l'historique : liste de multipliers s√©par√©s par espaces ou virgules.")
    print("Ex : 1.03 2.45, 3.96 1.00 5.12\n")
    
    # Lecture de l'historique
    raw = input("Entrez les multipliers pr√©c√©dents : ").strip()
    historique = nettoyer_historique(raw)
    if len(historique) < 1:
        print("\n‚ö†Ô∏è Historique invalide. Veuillez entrer au moins une valeur positive.\n")
        return
    
    # Lecture du num√©ro du dernier tour
    last_tour_str = input("Entrez le num√©ro du dernier tour (ex : 150) : ").strip()
    try:
        last_tour = int(last_tour_str)
    except ValueError:
        print("\n‚ö†Ô∏è Num√©ro de tour invalide. Veuillez entrer un entier.\n")
        return
    
    # G√©n√©ration des pr√©dictions expert
    preds = expert_predictions(historique, tours=20)
    
    print("\nüìà R√©sultats de la pr√©diction T+1 √† T+20 :")
    for i, val in enumerate(preds, start=1):
        tour = last_tour + i
        tag = color_tag(val)
        assurance = calculer_assurance(val)
        # Affichage format√©
        print(f"  T{tour} ‚Üí {tag} {val}x  ‚Äî Assurance : {assurance}%")
    print()

if __name__ == "__main__":
    main()
